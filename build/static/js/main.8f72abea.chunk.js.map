{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["App","props","resetBoard","setState","moves","winner","getPiece","x","y","state","filter","item","getWinningMovesForVelocity","xPosition","yPosition","xVelocity","yVelocity","winningMoves","player","delta","checkX","checkY","checkPiece","push","checkForWin","velocities","index","length","element","addMove","playerTurn","nextPlayerTurn","availableYPosition","position","rows","concat","columns","this","rowViews","row","columnViews","column","piece","button","onClick","style","width","height","backgroundColor","border","display","padding","cursor","borderRadius","flex","undefined","flexDirection","left","right","bottom","top","zIndex","justifyContent","alignItems","color","fontWeight","fontSize","className","createBoard","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iOAAe,I,YC4JAA,E,kDA1Ib,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAWVC,WAAa,WACZ,EAAKC,SAAS,CAAEC,MAAO,GAAIC,OAAQ,QAbf,EAiBrBC,SAAW,SAACC,EAAEC,GAKZ,OAJa,EAAKC,MAAML,MAAMM,QAAO,SAACC,GACtC,OAAQA,EAAKJ,IAAMA,GAAKI,EAAKH,IAAKA,KAGtB,IAtBO,EAyBrBI,2BAA6B,SAACC,EAAWC,EAAWC,EAAWC,GAK7D,IAJA,IAAMC,EAAe,CAAC,CAACV,EAAGM,EAAWL,EAAGM,IAClCI,EAAS,EAAKZ,SAASO,EAAWC,GAAWI,OAG1CC,EAAQ,EAAGA,GAAS,EAAGA,GAAS,EAAG,CAC1C,IAAMC,EAASP,EAAYE,EAAYI,EACjCE,EAASP,EAAYE,EAAYG,EAEjCG,EAAa,EAAKhB,SAASc,EAAQC,GACzC,IAAIC,GAAcA,EAAWJ,SAAWA,EAItC,MAHAD,EAAaM,KAAK,CAAChB,EAAGa,EAAQZ,EAAGa,IAQrC,IAAK,IAAIF,GAAS,EAAGA,IAAU,EAAGA,GAAS,EAAG,CAC5C,IAAMC,EAASP,EAAYE,EAAYI,EACjCE,EAASP,EAAYE,EAAYG,EAEjCG,EAAa,EAAKhB,SAASc,EAAQC,GACzC,IAAIC,GAAcA,EAAWJ,SAAWA,EAItC,MAHAD,EAAaM,KAAK,CAAChB,EAAGa,EAAQZ,EAAGa,IAMrC,OAAOJ,GAxDY,EA2DrBO,YAAc,SAACjB,EAAEC,GAEf,IADA,IAAMiB,EAAa,CAAC,CAAElB,EAAE,EAAGC,EAAE,GAAI,CAACD,EAAE,EAAGC,EAAE,GAAI,CAACD,GAAG,EAAGC,EAAE,GAAI,CAACD,EAAE,EAAGC,EAAE,IACzDkB,EAAQ,EAAGA,EAAQD,EAAWE,OAAQD,IAAS,CACtD,IAAME,EAAUH,EAAWC,GACrBT,EAAe,EAAKL,2BAA2BL,EAAGC,EAAGoB,EAAQrB,EAAGqB,EAAQpB,GAC1ES,EAAaU,OAAS,GACxB,EAAKxB,SAAS,CAAEE,OAAQ,EAAKC,SAASC,EAAGC,GAAGU,OAAQD,mBAjErC,EAyErBY,QAAU,SAACtB,EAAEC,GAMX,IALA,IAAQsB,EAAe,EAAKrB,MAApBqB,WAEFC,EAAgC,QAAfD,EAAuB,SAAW,MAErDE,EAAqB,KAChBC,EAAW,EAAKxB,MAAMyB,KAAO,EAAGD,GAAY,EAAGA,IACtD,IAAK,EAAK3B,SAASC,EAAG0B,GAAW,CAC/BD,EAAqBC,EACrB,MAIuB,OAAvBD,GAEJ,EAAK7B,SAAS,CAAEC,MAAO,EAAKK,MAAML,MAAM+B,OAAO,CAAE5B,IAAGC,EAAGwB,EAAoBd,OAAQY,IAAeA,WAAYC,IAAkB,kBAAM,EAAKP,YAAYjB,EAAGyB,EAAoBF,OArF5K,EAAKrB,MAAO,CACVyB,KAAM,EACNE,QAAS,EACThC,MAAO,GACP0B,WAAY,OAPG,E,+CA8FrB,WAII,IAJW,IAAD,OACV,EAAgCO,KAAK5B,MAAfJ,GAAtB,EAAO6B,KAAP,EAAaE,QAAb,EAAsB/B,QAChBiC,EAAW,GAFP,WAIDC,GAEP,IADA,IAAMC,EAAc,GALZ,WAMCC,GAEL,IAAMC,EAAQ,EAAKpC,SAASmC,EAAQF,GACpCC,EAAYjB,KAEZ,qBAAKoB,QAAM,EAACC,QAAW,WAAO,EAAKf,QAAQY,EAAQF,IAAOM,MAAS,CAAEC,MAAO,MAAOC,OAAQ,MAAOC,gBAAiB,OAAQC,OAAQ,oBAAqBC,QAAS,OAAQC,QAAS,EAAGC,OAAQ,WAA7L,SACE,qBAAKP,MAAQ,CAAEQ,aAAc,MAAOL,gBAAiB,QAASM,KAAM,EAAGJ,QAAS,QAAhF,SAEGR,EAAQ,qBAAKG,MAAS,CAAEG,gBAAiBN,EAAMxB,OAAQoC,KAAM,EAAGD,aAAc,cAAaE,QAR3Fd,EAAO,EAAGA,EAAS,EAAKhC,MAAM2B,QAASK,GAAU,EAAG,EAApDA,GAaTH,EAASf,KACP,sBAAKsB,MAAS,CAAEK,QAAS,OAAQM,cAAe,OAAhD,cAA2DhB,EAA3D,SAhBKD,EAAI,EAAGA,EAAMF,KAAK5B,MAAMyB,KAAMK,GAAO,EAAG,EAAxCA,GAoBT,OACE,sBAAKM,MAAO,CAAEG,gBAAiB,QAASE,QAAS,OAAQM,cAAe,UAAxE,UACGnD,GAAU,sBAAKuC,QAAUP,KAAKnC,WAAY2C,MAAO,CAACZ,SAAU,WAAYwB,KAAK,EAAGC,MAAO,EAAEC,OAAQ,EAAEC,IAAK,EAAGC,OAAQ,EAAGb,gBAAiB,wBAAyBE,QAAS,OAAQY,eAAgB,SAAUC,WAAY,SAAUC,MAAO,OAAQC,WAAY,MAAOC,SAAU,OAAnQ,oBAA+Q7D,EAA/Q,iBACViC,O,oBAKT,WAEE,OACE,qBAAK6B,UAAU,MAAf,SAEE,qBAAKtB,MAAQ,CAAEE,OAAQ,OAAQI,QAAS,EAAGD,QAAS,OAAQY,eAAgB,SAAUC,WAAY,UAAlG,SACC1B,KAAK+B,sB,GAtIMC,IAAMC,WCJTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8f72abea.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import logo from './logo.svg';\nimport './App.css';\nimport React from 'react';\n\n/*\n  Board needs to be made of buttons (buttons will change to either yellow/red depending on user input)\n  \n  Should keep track of the state of the game (win, lose, tie?)\n  Should alternate between colours to indicate which player is playing\n\n  Functions:\n    -> Need to create the board (6x7 grid)\n    -> Need to track where the player has moved\n    -> Need to check the state of the game (mentioned above)\n*/\n\nclass App extends React.Component{\n\n  constructor(props) {\n    super(props);\n\n    this.state ={\n      rows: 6,\n      columns: 7,\n      moves: [],\n      playerTurn: 'red',\n    };\n  }\n\n  // Will reset the board\nresetBoard = () => {\n this.setState({ moves: [], winner: null });\n}\n\n// Track each piece placed and its location\ngetPiece = (x,y) => {\n  const list = this.state.moves.filter((item) => {\n  return (item.x === x && item.y ===y);\n  });\n\n  return list[0];\n}\n\ngetWinningMovesForVelocity = (xPosition, yPosition, xVelocity ,yVelocity) => {\n  const winningMoves = [{x: xPosition, y: yPosition}];\n  const player = this.getPiece(xPosition, yPosition).player;\n\n  //Checks forward delta\n  for (let delta = 1; delta <= 3; delta += 1) {\n    const checkX = xPosition + xVelocity * delta;\n    const checkY = yPosition + yVelocity * delta;\n\n    const checkPiece = this.getPiece(checkX, checkY);\n    if( checkPiece && checkPiece.player === player) {\n      winningMoves.push({x: checkX, y: checkY});\n    }\n    else {\n      break;\n    }\n  }\n\n  // Checks reverse delta\n  for (let delta = -1; delta >= -3; delta -= 1) {\n    const checkX = xPosition + xVelocity * delta;\n    const checkY = yPosition + yVelocity * delta;\n\n    const checkPiece = this.getPiece(checkX, checkY);\n    if( checkPiece && checkPiece.player === player) {\n      winningMoves.push({x: checkX, y: checkY});\n    }\n    else {\n      break;\n    }\n  }\n  return winningMoves;\n}\n\ncheckForWin = (x,y) => {\n  const velocities = [{ x:1, y:0}, {x:0, y:1}, {x:-1, y:1}, {x:1, y:1}];\n  for (let index = 0; index < velocities.length; index ++){\n    const element = velocities[index];\n    const winningMoves = this.getWinningMovesForVelocity(x, y, element.x, element.y)\n    if (winningMoves.length > 3){\n      this.setState({ winner: this.getPiece(x, y).player, winningMoves });\n    }\n  }\n}\n\n\n\n// This will track where the player has moved (and will add the colour)\naddMove = (x,y) => {\n  const { playerTurn } = this.state;\n  // update the colour of the piece based on turns\n  const nextPlayerTurn = playerTurn === 'red' ? 'yellow' : 'red';\n  // make sure all pieces are played from the bottom -> up\n  let availableYPosition = null;\n  for (let position = this.state.rows - 1; position >= 0; position--) {\n    if (!this.getPiece(x, position)) {\n      availableYPosition = position;\n      break;\n    }\n  }\n\n  if (availableYPosition !== null){\n    // Update the state to change player turn                                                                                    // Check for win based on next turn\n  this.setState({ moves: this.state.moves.concat({ x, y: availableYPosition, player: playerTurn }), playerTurn: nextPlayerTurn }, () => this.checkForWin(x, availableYPosition, playerTurn));\n  }\n    \n}\n\n// Will create a board (a 6x7 grid)\ncreateBoard() {\n    const {rows, columns, winner} = this.state;\n    const rowViews = [];\n    // For loops will populate the rows/columns\n    for (let row=0; row < this.state.rows; row += 1){\n      const columnViews = [];\n      for (let column=0; column < this.state.columns; column += 1){\n          // Store locations of pieces\n          const piece = this.getPiece(column, row);\n          columnViews.push(\n            // Upon clicking the button, your move will be added \n          <div button onClick = {() => {this.addMove(column, row)}} style = {{ width: '6vw', height: '6vw', backgroundColor: 'blue', border: '0.5px solid black', display: 'flex', padding: 8, cursor: 'pointer'}}>\n            <div style= {{ borderRadius: '50%', backgroundColor: 'white', flex: 1, display: 'flex'}}>\n              {/* Check for a piece in a certain cell, if a piece is present it will be undefined, if not it will change to colour of player */}\n              {piece ? <div style = {{ backgroundColor: piece.player, flex: 1, borderRadius: '50%' }}/> : undefined}\n            </div>\n          </div>\n          );\n      }  \n      rowViews.push(\n        <div style = {{ display: 'flex', flexDirection: 'row' }}> {columnViews} </div>\n        );\n    }\n\n    return(\n      <div style={{ backgroundColor: 'black', display: 'flex', flexDirection: 'column'}}>\n        {winner && <div onClick= {this.resetBoard} style={{position: 'absolute', left:0 ,right: 0,bottom: 0,top: 0, zIndex: 3, backgroundColor: 'rgba(216,191,216,0.5)', display: 'flex', justifyContent: 'center', alignItems: 'center', color: '#fff', fontWeight: '200', fontSize: '8vw'}}>{`${winner} wins!`} </div> }\n        {rowViews}\n      </div>\n    );\n  }\n\nrender() {\n\n  return (\n    <div className=\"App\">\n\n      <div style= {{ height: '100%', padding: 5, display: 'flex', justifyContent: 'center', alignItems: 'center'}}>\n      {this.createBoard()}\n      </div>\n        </div>\n  );\n}\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}